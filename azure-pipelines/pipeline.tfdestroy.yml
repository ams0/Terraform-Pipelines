#####################################
# TF Destroy Pipeline Configuration #
#####################################

name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

trigger: none
pr: none

pool:
  vmImage: "ubuntu-latest"

resources:
  repositories:
  - repository: Terraform-Code
    type: git
    name: Terraform-Code
    ref: 'refs/heads/master'

variables:
  - group: tool_versions
  - name: workDir
    value: "$(System.DefaultWorkingDirectory)/terraform"
  #############################################################
  # Those vars have to been declared on pipeline object level #
  #############################################################
  # - name: environment #Variable is passed in as queue time variable
  #   value: "staging"
  # - name: azureSubscription #Variable is passed in as queue time variable
  #   value: "dev"
  # - name: "DEPLOYMENT_DIR" #Variable is passed in as queue time variable
  #   value: 'XX_layer/XX_deployment'

jobs:
  - job: RunTfDestroy
    steps:
      - template: ./templates/template.step.checkout.terraform-code.yml
              
      - template: ./templates/template.step.setupenv.yml
        parameters:
          environment: $(ENVIRONMENT)

      - template: ./templates/template.step.install.terraform.yml
        parameters:
          version: $(terraform)

      - template: ./templates/template.step.setup.tfinit.options.yml
      
      - task: TerraformCLI@0
        displayName: "Run TF Init"
        inputs:
          command: "init"
          workingDirectory: "$(workDir)/$(DEPLOYMENT_DIR)"
          backendType: "azurerm"
          backendServiceArm: "$(azureSubscription)"
          backendAzureRmResourceGroupName: "$(TF_VAR_BACKEND_RESOURCE_GROUP_NAME)"
          backendAzureRmStorageAccountName: "$(TF_VAR_BACKEND_STORAGE_ACCOUNT_NAME)"
          backendAzureRmContainerName: "$(TF_VAR_BACKEND_CONTAINER_NAME)"
          backendAzureRmKey: "$(DEPLOYMENT_DIR)"
          commandOptions: '$(TF_INIT_COMMAND_OPTIONS)'

      - task: TerraformCLI@0
        displayName: "Run TF Destroy for $(DEPLOYMENT_DIR)"
        inputs:
          command: "destroy"
          environmentServiceName: "$(azureSubscription)"
          workingDirectory: "$(workDir)/$(DEPLOYMENT_DIR)"
          secureVarsFile: "$(ENVIRONMENT).compiled.env"
          commandOptions: "-auto-approve"

      - task: Bash@3
        displayName: "INFORMATION"
        inputs:
          targetType: "inline"
          script: |
            echo "##vso[task.logissue type=warning]IMPORTANT! After destroying you have to delete /terraform/$(DEPLOYMENT_DIR) manually and merge changes to the main branch!!!"
