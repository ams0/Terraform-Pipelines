# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: "ubuntu-latest"

resources:
  repositories:
  - repository: Terraform-Code
    type: git
    name: Terraform-Code
    ref: 'refs/heads/master'
    trigger:
      branches:
        include:
        - master
      paths:
        include:
        - environments/*
   
workspace:
  clean:  resources     

steps:
- template: ./templates/template.step.checkout.terraform-code.yml
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
        if [[ -z "${SYSTEM_DEBUG}" ]]; then
          echo "##[command] Debug set to false"
          echo "##vso[task.setvariable variable=DEBUG_ENABLED;]false"
        else
          echo "##[command] Debug set to true"
          echo "##vso[task.setvariable variable=DEBUG_ENABLED;]true"
        fi
        ls
  displayName: "Set Debug Flag"
- task: Bash@3
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/env/compile.env.sh'
    arguments: '$(System.DefaultWorkingDirectory)/environments/ $(Build.StagingDirectory) $(DEBUG_ENABLED)'
    failOnStderr: true
  displayName: "Compile Env File"
- task: Bash@3
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/env/upload.sh'
    arguments: '$(Build.StagingDirectory) $(System.AccessToken) "$(System.CollectionUri)" "$(System.TeamProject)" $(DEBUG_ENABLED)'
    failOnStderr: true
  displayName: "Upsert Env Files to Secure Files"